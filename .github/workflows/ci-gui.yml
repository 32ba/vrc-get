name: CI (Build GUI)

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - triple: x86_64-unknown-linux-gnu
            on: ubuntu-latest
            setup: |
              sudo apt update && sudo apt install -y lld
              ld.lld --version

              sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
            rustflags: "-C link-arg=-fuse-ld=lld"
          - triple: x86_64-pc-windows-msvc
            on: windows-latest
          #- triple: aarch64-pc-windows-msvc
          #  on: windows-latest
          - triple: x86_64-apple-darwin
            on: macos-latest
            # Arm64 runner on macOS is not available for open source repositories with macos-14!
            # https://github.blog/changelog/2024-01-30-github-actions-introducing-the-new-m1-macos-runner-available-to-open-source/
          - triple: aarch64-apple-darwin
            on: macos-14
        triple:
          - x86_64-unknown-linux-gnu
          #- aarch64-unknown-linux-gnu
          - x86_64-pc-windows-msvc
          #- aarch64-pc-windows-msvc
          - x86_64-apple-darwin
          - aarch64-apple-darwin

    runs-on: ${{ matrix.on }}
    env:
      RUSTFLAGS: ${{ matrix.rustflags }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.triple }}
      - name: Install cross-compilation tools
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.triple }}
      - uses: Swatinem/rust-cache@v2
        with:
          key: ci-build-gui-${{ matrix.triple }}
      - uses: taiki-e/install-action@v2
        with:
          tool: tauri-cli@1

      - name: Setup
        run: ${{ matrix.setup }}

      - name: Build
        run: cargo tauri build --verbose --target ${{ matrix.triple }}

      - name: Upload built binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.triple }}
          path: |
            target/${{ matrix.triple }}/release/vrc-get*
            target/${{ matrix.triple }}/release/bundle/*/vrc-get*

  conclude:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [build]
    steps:
      - name: Conclude Tests
        env: { NEEDS: "${{ toJSON(needs) }}" }
        run: |
          echo "$NEEDS" | jq -c '. | to_entries[] | [.key, .value.result]'
          echo "$NEEDS" | jq -e '. | all(.result == "success")' > /dev/null

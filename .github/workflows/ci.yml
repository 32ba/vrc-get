name: CI (Build)

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # for linux, use cross on ubuntu-latest
          - triple: x86_64-unknown-linux-musl
            run-test: true
            on: ubuntu-latest
            setup: |
              sudo apt update && sudo apt install -y musl-tools lld
              # check installed version
              musl-gcc --version
              ld.lld --version
            rustflags: "-C link-arg=-fuse-ld=lld -C target-feature=+crt-static"
          - triple: aarch64-unknown-linux-musl
            run-test: true
            on: ubuntu-latest
            setup: |
              # setup musl tools for cross compilation 

              # setup env settings
              echo "deb [ arch=arm64 ] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -sc) universe" | sudo tee -a /etc/apt/sources.list
              sudo apt update

              # setup qemu
              apt install qemu-user-static
              echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_RUNNER=qemu-aarch64-static" >> $GITHUB_ENV

              # install cross compiler
              sudo apt install -y gcc-aarch64-linux-gnu lld
              # setup musl tools
              mkdir .setup-musl
              pushd .setup-musl
              apt download musl-dev:arm64
              dpkg --extract musl-dev*.deb musl-dev
              sudo ln -s "$(pwd)"/musl-dev/usr/include/aarch64-linux-musl /usr/include/
              sudo ln -s "$(pwd)"/musl-dev/usr/lib/aarch64-linux-musl /usr/lib/
              find /usr/lib/aarch64-linux-musl -follow
              find /usr/include/aarch64-linux-musl -follow
              sudo tee /usr/bin/aarch64-linux-musl-gcc << 'EOF'
              #!/bin/sh
              exec "${REALGCC:-aarch64-linux-gnu-gcc}" "$@" -specs "/usr/lib/aarch64-linux-musl/musl-gcc.specs"
              EOF
              sudo chmod +x /usr/bin/aarch64-linux-musl-gcc

              # link lld for cross compilation
              sudo ln -s "/usr/bin/ld.lld" "/usr/bin/aarch64-linux-musl-ld.lld"
              sudo ln -s "/usr/bin/ld.lld" "/usr/bin/aarch64-linux-gnu-ld.lld"

              # check installed version
              qemu-aarch64-static --version
              aarch64-linux-musl-gcc --version
              ld.lld --version
              popd
            rustflags: "-C link-arg=-fuse-ld=lld -C linker=aarch64-linux-musl-gcc -C linker-flavor=gcc -C default-linker-libraries=y -C target-feature=+crt-static"
          # linux with gnu toolchain
          - triple: x86_64-unknown-linux-gnu
            run-test: true
            on: ubuntu-latest
            setup: |
              sudo apt update && sudo apt install -y lld
              ld.lld --version
            rustflags: "-C link-arg=-fuse-ld=lld"
          - triple: aarch64-unknown-linux-gnu
            run-test: true
            on: ubuntu-latest
            setup: |
              sudo apt update && sudo apt install -y gcc-aarch64-linux-gnu lld qemu-user-static
              aarch64-linux-gnu-gcc --version
              qemu-aarch64-static --version
              
              # setup qemu
              echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_RUNNER=qemu-aarch64-static" >> $GITHUB_ENV

              ld.lld --version
              sudo ln -s "/usr/bin/ld.lld" "/usr/bin/aarch64-linux-gnu-ld.lld"
            rustflags: "-C link-arg=-fuse-ld=lld -C linker=aarch64-linux-gnu-gcc"
          # for windows, use cross on ubuntu-latest
          - triple: x86_64-pc-windows-msvc
            run-test: true
            on: windows-latest
          #- triple: aarch64-pc-windows-msvc
          #  on: macos-latest
          #  cross: false
          # for macOS, on macOS without cross
          - triple: x86_64-apple-darwin
            run-test: true
            on: macos-latest
          - triple: aarch64-apple-darwin
            run-test: false
            on: macos-latest
        triple:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - x86_64-pc-windows-msvc
          #- aarch64-pc-windows-msvc
          - x86_64-apple-darwin
          - aarch64-apple-darwin

    runs-on: ${{ matrix.on }}
    env:
      RUSTFLAGS: ${{ matrix.rustflags }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.triple }}
      - uses: Swatinem/rust-cache@v1
        with:
          target-dir: target
          key: ci-build

      - name: Setup
        run: ${{ matrix.setup }}
      - name: Build
        run: cargo build --verbose --target ${{ matrix.triple }}
      - name: Upload built binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.triple }}
          path: |
            target/${{ matrix.triple }}/debug/vrc-get*
            target/${{ matrix.triple }}/debug/libvrc-get*
      - name: Build tests
        run: cargo build --tests --target ${{ matrix.triple }}
      - name: Run tests
        if: ${{ matrix.run-test }}
        run: cargo test --verbose --target ${{ matrix.triple }}

name: Publish

on:
  workflow_dispatch:
    inputs:
      release_kind:
        type: choice
        description: The type of release.
        default: prerelease
        required: true
        options:
          - prerelease
          - start-rc
          - stable

env:
  RELEASER_CHANGER: 'regex-pattern:version = "$1"@Cargo.toml'
  SOMETHING_RELEASER_SEMVER: 1

jobs:
  pre-build:
    name: Update version name
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.update-version.outputs.version }}
      prerelease: ${{ steps.update-version.outputs.prerelease }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: anatawa12/something-releaser@v2
      - uses: snow-actions/git-config-user@v1.0.0
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Update Version Name
        id: update-version
        run: |
          # set version name in properties file
          case "$RELEASE_KIND_IN" in
            "prerelease" )
              set-version "$(version-next "$(get-version)")"
              gh-export-variable PRERELEASE true
              gh-set-output prerelease true
              ;;
            "start-rc" )
              set-version "$(version-set-channel "$(get-version)" rc)"
              gh-export-variable PRERELEASE true
              gh-set-output prerelease true
              ;;
            "stable" )
              set-version "$(version-set-channel "$(get-version)" stable)"
              gh-export-variable PRERELEASE false
              gh-set-output prerelease '' # empty string for false
              ;;
            * )
              echo "invalid release kind: $RELEASE_KIND_IN"
              exit 255
              ;;
          esac

          case "$GITHUB_REF_NAME" in
            master | master-* )
              echo "head is master or master-*"
              ;;
            * )
              echo "invalid release kind: $RELEASE_KIND_IN is not allowd for $GITHUB_REF_NAME"
              exit 255
              ;;
          esac

          gh-export-variable VERSION "$(get-version)"
          gh-set-output version "$(get-version)"
        env:
          RELEASE_KIND_IN: ${{ github.event.inputs.release_kind }}

      - name: Update cargo metadata
        run: cargo metadata --format-version=1 > /dev/null
      - name: Commit
        id: update
        run: |-
          # commit & tag
          git add Cargo.lock
          git commit -m "v$VERSION"
          git branch releasing
          git push -f -u origin releasing

  build-rust:
    name: Build rust
    strategy:
      fail-fast: false
      matrix:
        include:
          # for linux, use cross on ubuntu-latest
          - triple: x86_64-unknown-linux-musl
            on: ubuntu-latest
            cross: true
          - triple: aarch64-unknown-linux-musl
            on: ubuntu-latest
            cross: true
          # for windows, use cross on ubuntu-latest
          - triple: x86_64-pc-windows-msvc
            on: windows-latest
            cross: false
          #- triple: aarch64-pc-windows-msvc
          #  on: macos-latest
          #  cross: false
          # for macOS, on macOS without cross
          - triple: x86_64-apple-darwin
            on: macos-latest
            cross: false
          - triple: aarch64-apple-darwin
            on: macos-latest
            cross: false
    runs-on: ${{ matrix.on }}
    needs: [pre-build]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: 'releasing'
          submodules: recursive
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.triple }}
      - uses: Swatinem/rust-cache@v1
        with:
          target-dir: target
          key: ${{ matrix.triple }}

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: --target ${{ matrix.triple }} --release

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.triple }}
          path: target/${{ matrix.triple }}/release/vrc-get*

  publish-crates-io:
    name: Publish to crates.io
    if: false
    environment:
      name: crates.io
      url: https://crates.io/crates/vrc-get
    runs-on: ubuntu-latest
    needs: [pre-build, build-rust]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: 'releasing'
          fetch-depth: 1
          submodules: recursive

      - name: Publish CARGO
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: cargo publish --no-verify

  publish:
    name: Publish to GitHub
    environment:
      name: master branch
      url: https://github.com/anatawa12/vrc-get/releases/v${{ needs.pre-build.outputs.version }}
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [pre-build, build-rust]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: 'releasing'
          fetch-depth: 2
          submodules: recursive
          token: ${{ secrets.MASTER_GITHUB_PAT }}

      # tools
      - uses: anatawa12/something-releaser@v2
      - uses: snow-actions/git-config-user@v1.0.0
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: actions/download-artifact@v3
        with:
          path: outputs

      - name: Push tag
        env:
          VERSION: ${{ needs.pre-build.outputs.version }}
        run: |-
          # set tag and publish current version
          git tag "v$VERSION"
          git push && git push --tags
          # create master and push
          git switch -c master
          git fetch origin master --depth=1
          git log --all --graph
          git push -u origin master

      - name: create release
        shell: bash
        env:
          VERSION: ${{ needs.pre-build.outputs.version }}
          GH_TOKEN: ${{ github.token }}
        run: |-
          mkdir assets

          pushd outputs
            for d in *; do
              pushd "$d"
                ls
                for f in vrc-get*; do
                  mv $f "../../assets/$d-$f"
                done
              popd
            done
          popd

          sleep 1
          gh release create ${{ needs.pre-build.outputs.prerelease && '--prerelease' || '' }} \ --verify-tag "v$VERSION" assets/*

          rm -rf outputs assets

      - name: prepare next release & push
        if: inputs.publish && !needs.pre-build.outputs.prerelease
        run: |
          VERSION="$(version-next "$(get-version)")"
          set-version "$(version-set-channel "$VERSION" beta 0)"
          cargo metadata --format-version=1 > /dev/null
          git commit -am "chore: prepare for next version: $VERSION"
          git push
          git push --delete origin releasing
